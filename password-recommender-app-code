//creating lists from the dataset "Passwords"
var passwordList = getColumn("Passwords","password");
var passwordTimeValueList = getColumn("Passwords","value");
var passwordUnitList = getColumn("Passwords","time_unit");
var passwordStrengthList = getColumn("Passwords","strength");

//creating filtered lists
var passwordFilteredList= [];
var passwordTimeValueFilteredList= [];
var passwordUnitFilteredList= [];

//creating variables
var currentPasswordIndex = 0;
var pastPasswordIndex = 0;

//this event handler will display an info message that gives a brief description of the app
//as well as play a sound
onEvent("infoIcon", "click", function( ) {
  setProperty("infoMessage", "hidden", false);
  setProperty("exitIcon", "hidden", false);
  playSound("sound://category_digital/coin_2.mp3", false);
});

//this event handler will close the aforementioned description as well as play a sound
onEvent("exitIcon", "click", function( ) {
  setProperty("infoMessage", "hidden", true);
  setProperty("exitIcon", "hidden", true);
  playSound("sound://category_digital/bounce_2.mp3", false);
});

//this event handler will display your password and the time it takes to crack your
//specific password as well as play a sound
onEvent("strengthDropDown", "input", function( ) {
  filterLists(getNumber("strengthDropDown"));
  passwordRandomize();
  updateScreen();
});

/* this function will filter out passwords, time, and time units, by the user's inputted strength
strengthNum {number} - the number the user has decided from the dropdown */
function filterLists (strengthNum){
  passwordFilteredList= [];
  passwordTimeValueFilteredList= [];
  passwordUnitFilteredList= [];
  for (var i = 0; i < passwordList.length - 1; i++) {
    if (passwordStrengthList[i] == strengthNum){
      appendItem(passwordFilteredList, passwordList[i]);
      appendItem(passwordTimeValueFilteredList, passwordTimeValueList[i]);
      appendItem(passwordUnitFilteredList, passwordUnitList[i]);
    }
  }
}

//this function will randomize the index for the possible passwords that were filtered from the
//filterLists function, as well as making sure no two can repeat back to back
function passwordRandomize(){
  while (currentPasswordIndex == pastPasswordIndex) {
    currentPasswordIndex = randomNumber(0, passwordFilteredList.length - 1);
  }
  pastPasswordIndex = currentPasswordIndex; 
}

//this function will update the screen of the app, by setting the text of the passwordOutput and the
//timeToCrackOutput as well as play a sound
function updateScreen() {
  setText("passwordOutput", "Password: \n" + passwordFilteredList[currentPasswordIndex]);
  setText("timeToCrackOutput", "Time to Crack Password: \n" + passwordTimeValueFilteredList[currentPasswordIndex] + " " + passwordUnitFilteredList[currentPasswordIndex]);
  playSound("sound://category_pop/deep_bubble_notification.mp3", false);
}

//Citations for icons used in the app
// [1] Lock Image - icon://fa-lock from code.org
// [2] Info Icon - icon://fa-info-circle from code.org
// [3] Exit Icon - icon://fa-times-circle from code.org

//Citations for audio and sounds used in the app
// [1] Digital Pop Sound - sound://category_digital/bounce_2.mp3 from code.org
// [2] Digital Coin Sound - sound://category_digital/coin_2.mp3 from code.org
// [3] Bubble Pop Sound - sound://category_pop/deep_bubble_notification.mp3 from code.org

//Citations for Dataset used
//Passwords Dataset from code.org
